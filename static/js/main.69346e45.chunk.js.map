{"version":3,"sources":["images/alexander-unsplash.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","QuestionType","fetchQuizQuestions","amount","difficulty","questionType","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","Footer","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","MULTI","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69346e45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alexander-unsplash.6d174a39.jpg\";","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport enum QuestionType {\r\n    MULTI = \"multiple\",\r\n    TF = \"boolean\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n    amount: number, \r\n    difficulty: Difficulty, \r\n    questionType: QuestionType\r\n    ) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=${questionType}`;\r\n    const data = await (await fetch(endpoint)).json();  // await the fetch & then await the json  \r\n    // console.log(data);   // debug point  \r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer,\r\n            ]),\r\n        }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #fff8eb;\r\n    border-radius: 10px;\r\n    border: 2px solid #a6813d;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n\r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClicked}) => \r\n            correct\r\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n                : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n                : 'linear-gradient(90deg, #ffbe56, #b47d6e)'};\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n    }\r\n`;\r\n","import React from 'react';\r\n\r\n// styles  \r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\n// types \r\nimport { AnswerObject } from '../App';\r\n\r\n// styles  \r\n// import { Wrapper, ButtonWrapper } from '.QuestionCard.styles';\r\n\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({ \r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer, \r\n    questionNr, \r\n    totalQuestions,\r\n}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{ __html: question }} />\r\n        <div>\r\n            {answers.map(answer => (\r\n                <ButtonWrapper \r\n                    key={answer}\r\n                    correct={userAnswer?.correctAnswer === answer}\r\n                    userClicked={userAnswer?.answer === answer}\r\n                >\r\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/alexander-unsplash.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        height: auto;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Emplema One, sans-serif;\r\n        background-image: linear-gradient(180deg, #fff, #fdb87f);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px, 2px, #a35400);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, \r\n    .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fff, #91e9ff);\r\n        border: 2px solid #58b0d3;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`;\r\n\r\n\r\nexport const Footer = styled.div`\r\n    footer {\r\n        display: flex;\r\n        height: auto;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        font-family: Catamaran, sans-serif;\r\n        background-image: linear-gradient(180deg, #fff, #fdb87f);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px, 2px, #a35400);\r\n        font-size: 14px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .foot-flex {\r\n        flex: 2 1 200px;\r\n    }\r\n`;","import React, { useState } from 'react';\nimport { fetchQuizQuestions, QuestionType } from './API';\n\n// components  \nimport QuestionCard from './components/QuestionCard';\n\n// types  \nimport { QuestionState, Difficulty } from './API';\n\n// styles  \nimport { GlobalStyle, Wrapper, Footer } from './App.styles';\n\n\nexport type AnswerObject ={\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState (0);\n  const [gameOver, setGameOver] = useState(true);\n\n  // debugging  \n  // console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY, QuestionType.MULTI));\n  // debug v2  \n  // console.log(questions);\n\n\n  // handle API calls  \n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n      QuestionType.MULTI ///////////////////////////////////// need comma? \n    );\n\n    setQuestions(newQuestions);   // implement error handling in the future...  \n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  };\n\n  // function to trigger when user selects answer  \n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer \n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct  \n      if (correct) setScore(prev => prev + 1);\n      // save answer in array for user answers  \n      const AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, AnswerObject]);\n    }\n  };\n\n  // function for when user clicks for next question  \n  const nextQuestion = () => {\n    // move on to next question IF not last question  \n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n\n  };\n\n\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Random Trivia</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n          Start\n          </button>\n        ) : null }\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null }\n        {loading && <p>Loading Questions ...</p> }\n        {!gameOver && !loading && ( \n          <QuestionCard \n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && \n        !loading && \n        userAnswers.length === number + 1 && \n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null }\n      </Wrapper>\n      <Footer>\n        <footer className=\"foot-flex\">\n          - Quiz built by @dsmith73 -\n        </footer>\n      </Footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}